41. Find all orders with amounts smaller than any amount for a customer in San Jose.

mysql> select * from orders where amt<2003 and amt<2008;
+------+---------+------------+------+
| onum | amt     | odate      | cnum |
+------+---------+------------+------+
| 3001 |   18.69 | 1996-03-10 | 2008 |
| 3002 | 1900.10 | 1996-03-10 | 2007 |
| 3003 |  767.19 | 1996-03-10 | 2001 |
| 3006 | 1098.16 | 1996-03-10 | 2008 |
| 3007 |   75.75 | 1996-04-10 | 2002 |
| 3009 | 1713.23 | 1996-03-10 | 2002 |
| 3010 | 1309.95 | 1996-06-10 | 2004 |
+------+---------+------------+------+
7 rows in set (0.00 sec)

42) Find all orders with above average amounts for their customers.
mysql> select o.onum, avg(o.amt) from customer c join orders o on c.cnum=o.cnum group by  o.onum order by avg(o.amt) asc;
+------+-------------+
| onum | avg(o.amt)  |
+------+-------------+
| 3001 |   18.690000 |
| 3007 |   75.750000 |
| 3003 |  767.190000 |
| 3006 | 1098.160000 |
| 3010 | 1309.950000 |
| 3009 | 1713.230000 |
| 3002 | 1900.100000 |
| 3008 | 4723.000000 |
| 3005 | 5160.450000 |
| 3011 | 9891.880000 |
+------+-------------+
10 rows in set (0.00 sec)

43) Write a query that selects the highest rating in each city.
mysql> select city,max(rating) from customer group by city;
+----------+-------------+
| city     | max(rating) |
+----------+-------------+
| London   |         100 |
| Rome     |         200 |
| San Jose |         300 |
| Berlin   |         300 |
+----------+-------------+
4 rows in set (0.00 sec)

44) 44. Write a query that calculates the amount of the salesperson’s commission on each order by a
customer with a rating above 100.00.
mysql> select o.amt,o.cnum,c.rating,c.snum,s.comm,o.amt*s.comm from orders o,customer c,salespeople s where o.cnum=c.cnum and c.snum=s.snum and c.rating>100;
+---------+------+--------+------+------+--------------+
| amt     | cnum | rating | snum | comm | o.amt*s.comm |
+---------+------+--------+------+------+--------------+
|   75.75 | 2002 |    200 | 1003 | 0.10 |       7.5750 |
| 1713.23 | 2002 |    200 | 1003 | 0.10 |     171.3230 |
| 5160.45 | 2003 |    200 | 1002 | 0.13 |     670.8585 |
| 1309.95 | 2004 |    300 | 1002 | 0.13 |     170.2935 |
|   18.69 | 2008 |    300 | 1007 | 0.15 |       2.8035 |
| 1098.16 | 2008 |    300 | 1007 | 0.15 |     164.7240 |
+---------+------+--------+------+------+--------------+
6 rows in set (0.00 sec)

45)45. Count the customers with ratings above San Jose’s average.
mysql> select count(cnum),avg(rating) from customer group by city order by avg(rating) desc limit 1;
+-------------+-------------+
| count(cnum) | avg(rating) |
+-------------+-------------+
|           1 |    300.0000 |
+-------------+-------------+
1 row in set (0.00 sec)

46)46. Write a query that produces all pairs of salespeople with themselves as well as duplicate rows
with the order reversed.
mysql> select s.sname,c.sname from salespeople s,salespeople c where s.snum=c.snum order by s.sname desc;
+---------+---------+
| sname   | sname   |
+---------+---------+
| serres  | serres  |
| rifkin  | rifkin  |
| Peel    | Peel    |
| motika  | motika  |
| Fran    | Fran    |
| Axelrod | Axelrod |
+---------+---------+
6 rows in set (0.00 sec)

47)47. Find all salespeople that are located in either Barcelona or London.
mysql> select * from salespeople where city="barcelona" or city="london";
+------+--------+-----------+------+
| snum | sname  | city      | comm |
+------+--------+-----------+------+
| 1001 | Peel   | London    | 0.12 |
| 1004 | motika | London    | 0.11 |
| 1005 | Fran   | London    | 0.26 |
| 1007 | rifkin | barcelona | 0.15 |
+------+--------+-----------+------+
4 rows in set (0.00 sec)




48. Find all salespeople with only one customer.

mysql> select s.*,count(c.cnum) from salespeople s join customer c on s.snum=c.snum group by s.snum having count(c.cnum)=1;
+------+---------+-----------+------+---------------+
| snum | sname   | city      | comm | count(c.cnum) |
+------+---------+-----------+------+---------------+
| 1003 | Axelrod | NewYork   | 0.10 |             1 |
| 1004 | motika  | London    | 0.11 |             1 |
| 1007 | rifkin  | barcelona | 0.15 |             1 |
+------+---------+-----------+------+---------------+
3 rows in set (0.00 sec)


49)49. Write a query that joins the Customer table to itself to find all pairs of customers served by a
single salesperson.
mysql>  select a.cname,b.cname,c.sname from customer a,customer b,salespeople c where a.snum=b.snum and a.snum=c.snum;
+----------+----------+---------+
| cname    | cname    | sname   |
+----------+----------+---------+
| Hoffman  | Hoffman  | Peel    |
| Hoffman  | Clemens  | Peel    |
| Giovanni | Giovanni | Axelrod |
| Liu      | Liu      | serres  |
| Liu      | Grass    | serres  |
| Grass    | Liu      | serres  |
| Grass    | Grass    | serres  |
| Clemens  | Hoffman  | Peel    |
| Clemens  | Clemens  | Peel    |
| Pereira  | Pereira  | motika  |
| Cisneros | Cisneros | rifkin  |
+----------+----------+---------+
11 rows in set (0.00 sec)

50)50. Write a query that will give you all orders for more than $1000.00


mysql> select * from orders where amt>1000;
+------+---------+------------+------+
| onum | amt     | odate      | cnum |
+------+---------+------------+------+
| 3002 | 1900.10 | 1996-03-10 | 2007 |
| 3005 | 5160.45 | 1996-03-10 | 2003 |
| 3006 | 1098.16 | 1996-03-10 | 2008 |
| 3008 | 4723.00 | 1996-05-10 | 2006 |
| 3009 | 1713.23 | 1996-03-10 | 2002 |
| 3010 | 1309.95 | 1996-06-10 | 2004 |
| 3011 | 9891.88 | 1996-06-10 | 2006 |
+------+---------+------------+------+
7 rows in set (0.00 sec)



51. Write a query that lists each order number followed by the name of the customer who made
that order.

mysql> select c.cname,o.onum,o.amt from customer c join orders o on c.cnum=o.cnum;
+----------+------+---------+
| cname    | onum | amt     |
+----------+------+---------+
| Cisneros | 3001 |   18.69 |
| Pereira  | 3002 | 1900.10 |
| Hoffman  | 3003 |  767.19 |
| Liu      | 3005 | 5160.45 |
| Cisneros | 3006 | 1098.16 |
| Giovanni | 3007 |   75.75 |
| Clemens  | 3008 | 4723.00 |
| Giovanni | 3009 | 1713.23 |
| Grass    | 3010 | 1309.95 |
| Clemens  | 3011 | 9891.88 |
+----------+------+---------+
10 rows in set (0.00 sec)

52. Write 2 queries that select all salespeople (by name and number) who have customers in their

cities who they do not service, one using a join and one a corelated subquery. Which solution
is more elegant?
mysql> select s.sname,s.snum,c.city from salespeople s right join customer c on s.snum=c.snum;
+---------+------+----------+
| sname   | snum | city     |
+---------+------+----------+
| Peel    | 1001 | London   |
| Axelrod | 1003 | Rome     |
| serres  | 1002 | San Jose |
| serres  | 1002 | Berlin   |
| Peel    | 1001 | London   |
| motika  | 1004 | Rome     |
| rifkin  | 1007 | San Jose |
+---------+------+----------+
7 rows in set (0.00 sec)
mysql> select s.sname,s.snum,c.city from salespeople s left join customer c on s.snum=c.snum;
+---------+------+----------+
| sname   | snum | city     |
+---------+------+----------+
| Peel    | 1001 | London   |
| Peel    | 1001 | London   |
| serres  | 1002 | San Jose |
| serres  | 1002 | Berlin   |
| Axelrod | 1003 | Rome     |
| motika  | 1004 | Rome     |
| Fran    | 1005 | NULL     |
| rifkin  | 1007 | San Jose |
+---------+------+----------+
8 rows in set (0.00 sec)


53. Write a query that selects all customers whose ratings are equal to or greater than ANY (in the
SQL sense) of Serres’?
mysql> select * from customer order by rating desc;
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2007 | Pereira  | Rome     |    100 | 1004 |
+------+----------+----------+--------+------+
7 rows in set (0.00 sec)

54)54. Write 2 queries that will produce all orders taken on October 3 or October 4.

mysql> select * from orders where odate='1996-03-10' or odate='1996-04-10';
+------+---------+------------+------+
| onum | amt     | odate      | cnum |
+------+---------+------------+------+
| 3001 |   18.69 | 1996-03-10 | 2008 |
| 3002 | 1900.10 | 1996-03-10 | 2007 |
| 3003 |  767.19 | 1996-03-10 | 2001 |
| 3005 | 5160.45 | 1996-03-10 | 2003 |
| 3006 | 1098.16 | 1996-03-10 | 2008 |
| 3007 |   75.75 | 1996-04-10 | 2002 |
| 3009 | 1713.23 | 1996-03-10 | 2002 |
+------+---------+------------+------+
7 rows in set (0.00 sec)

55)55. Write a query that produces all pairs of orders by a given customer. Name that customer and
eliminate duplicates.

mysql> select o.onum,c.cname from customer c join orders o on c.cnum=o.cnum;
+------+----------+
| onum | cname    |
+------+----------+
| 3003 | Hoffman  |
| 3007 | Giovanni |
| 3009 | Giovanni |
| 3005 | Liu      |
| 3010 | Grass    |
| 3008 | Clemens  |
| 3011 | Clemens  |
| 3002 | Pereira  |
| 3001 | Cisneros |
| 3006 | Cisneros |
+------+----------+
10 rows in set (0.00 sec)


56. Find only those customers whose ratings are higher than every customer in Rome.

ans:	select cnum,cname,city,max(rating),snum from customer where city='rome';
+------+----------+------+-------------+------+
| cnum | cname    | city | max(rating) | snum |
+------+----------+------+-------------+------+
| 2002 | Giovanni | Rome |         200 | 1003 |
+------+----------+------+-------------+------+
1 row in set (0.00 sec)
				(or)
ans:	select * ,max(rating) from customer where city='rome';
 +------+----------+------+--------+------+-------------+
| cnum | cname    | city | rating | snum | max(rating) |
+------+----------+------+--------+------+-------------+
| 2002 | Giovanni | Rome |    200 | 1003 |         200 |
+------+----------+------+--------+------+-------------+
1 row in set (0.00 sec)

57. Write a query on the Customers table whose output will exclude all customers with a rating <=100.00, unless they are located in Rome.

ans:	 Select * from customer where rating>100 and city='rome';
+------+----------+------+--------+------+
| cnum | cname    | city | rating | snum |
+------+----------+------+--------+------+
| 2002 | Giovanni | Rome |    200 | 1003 |
+------+----------+------+--------+------+
1 row in set (0.00 sec)

58. Find all rows from the Customers table for which the salesperson number is 1001.

ans:	select * from customer where snum=1001;
+------+---------+--------+--------+------+
| cnum | cname   | city   | rating | snum |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+
2 rows in set (0.00 sec)

59. Find the total amount in Orders for each salesperson for whom this total is greater than the amount of the largest order in the table.

ans:	 select s.snum,sum(o.amt) from salespeople s join customer c join orders o on s.snum=c.snum and c.cnum=o.cnum group by s.snum having sum(o.amt)>(select max(amt) from orders) ;
+------+------------+
| snum | sum(o.amt) |
+------+------------+
| 1001 |   15382.07 |
+------+------------+
1 row in set (0.00 sec)

60. Write a query that selects all orders save those with zeroes or NULLs in the amount field.

ans:	select * from orders where amt is NULL or amt=0;
Empty set (0.00 sec) 

61. Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200.

ans:	select * from salespeople s join customer c  on s.snum=c.snum where c.rating<200 order by c.cname  asc;
+------+--------+--------+------+------+---------+--------+--------+------+
| snum | sname  | city   | comm | cnum | cname   | city   | rating | snum |
+------+--------+--------+------+------+---------+--------+--------+------+
| 1001 | Peel   | London | 0.12 | 2006 | Clemens | London |    100 | 1001 |
| 1001 | Peel   | London | 0.12 | 2001 | Hoffman | London |    100 | 1001 |
| 1004 | motika | London | 0.11 | 2007 | Pereira | Rome   |    100 | 1004 |
+------+--------+--------+------+------+---------+--------+--------+------+
3 rows in set (0.00 sec)	

62. List all Salespeople’s names and the Commission they have earned.

ans:	 select s.sname,s.comm*o.amt as "Commission earned" from salespeople s join customer c join orders o on s.snum=c.snum and c.cnum=o.cnum group by s.sname;
+---------+-------------------+
| sname   | Commission earned |
+---------+-------------------+
| rifkin  |            2.8035 |
| motika  |          209.0110 |
| Peel    |           92.0628 |
| serres  |          670.8585 |
| Axelrod |            7.5750 |
+---------+-------------------+
5 rows in set (0.00 sec)

63. Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s CNUM rather than his rating, so that it would still be usable if his rating changed.

ans:	 select cname,city from customer where rating in (select rating from customer where cname='Hoffman');
+---------+--------+
| cname   | city   |
+---------+--------+
| Hoffman | London |
| Clemens | London |
| Pereira | Rome   |
+---------+--------+
3 rows in set (0.00 sec)

64. Find all salespeople for whom there are customers that follow them in alphabetical order.

ans:	 select * from salespeople s join customer c on s.snum=c.snum order by c.cname asc;
+------+---------+-----------+------+------+----------+----------+--------+------+
| snum | sname   | city      | comm | cnum | cname    | city     | rating | snum |
+------+---------+-----------+------+------+----------+----------+--------+------+
| 1007 | rifkin  | barcelona | 0.15 | 2008 | Cisneros | San Jose |    300 | 1007 |
| 1001 | Peel    | London    | 0.12 | 2006 | Clemens  | London   |    100 | 1001 |
| 1003 | Axelrod | NewYork   | 0.10 | 2002 | Giovanni | Rome     |    200 | 1003 |
| 1002 | serres  | sanjoes   | 0.13 | 2004 | Grass    | Berlin   |    300 | 1002 |
| 1001 | Peel    | London    | 0.12 | 2001 | Hoffman  | London   |    100 | 1001 |
| 1002 | serres  | sanjoes   | 0.13 | 2003 | Liu      | San Jose |    200 | 1002 |
| 1004 | motika  | London    | 0.11 | 2007 | Pereira  | Rome     |    100 | 1004 |
+------+---------+-----------+------+------+----------+----------+--------+------+
7 rows in set (0.00 sec)

65. Write a query that produces the names and ratings of all customers of all who have above average orders.

ans:	 select c.cname,c.rating,o.amt from customer c join orders o on c.cnum=o.cnum group by c.cnum having amt>(select avg(amt) from orders);
+---------+--------+---------+
| cname   | rating | amt     |
+---------+--------+---------+
| Liu     |    200 | 5160.45 |
| Clemens |    100 | 4723.00 |
+---------+--------+---------+
2 rows in set (0.00 sec)

66. Find the SUM of all purchases from the Orders table.

ans:	select sum(amt) from orders;
+----------+
| sum(amt) |
+----------+
| 26658.40 |
+----------+
1 row in set (0.00 sec)

67. Write a SELECT command that produces the order number, amount and date for all rows in the order table.

ans:	select onum,amt,odate from orders;
+------+---------+------------+
| onum | amt     | odate      |
+------+---------+------------+
| 3001 |   18.69 | 1996-03-10 |
| 3002 | 1900.10 | 1996-03-10 |
| 3003 |  767.19 | 1996-03-10 |
| 3005 | 5160.45 | 1996-03-10 |
| 3006 | 1098.16 | 1996-03-10 |
| 3007 |   75.75 | 1996-04-10 |
| 3008 | 4723.00 | 1996-05-10 |
| 3009 | 1713.23 | 1996-03-10 |
| 3010 | 1309.95 | 1996-06-10 |
| 3011 | 9891.88 | 1996-06-10 |
+------+---------+------------+
10 rows in set (0.00 sec)

68. Count the number of nonNULL rating fields in the Customers table (including repeats).

ans:	select Count(rating) from customer where rating is not null;
+---------------+
| Count(rating) |
+---------------+
|             7 |
+---------------+
1 row in set (0.00 sec)


69. Write a query that gives the names of both the salesperson and the customer for each order after the order number.

ans:	select s.snum,s.sname,c.cname,o.onum from salespeople s join customer c join orders o on s.snum=c.snum and c.cnum=o.cnum group by s.snum;
+------+---------+----------+------+
| snum | sname   | cname    | onum |
+------+---------+----------+------+
| 1001 | Peel    | Hoffman  | 3003 |
| 1003 | Axelrod | Giovanni | 3007 |
| 1002 | serres  | Liu      | 3005 |
| 1004 | motika  | Pereira  | 3002 |
| 1007 | rifkin  | Cisneros | 3001 |
+------+---------+----------+------+
5 rows in set (0.00 sec)

70. List the commissions of all salespeople servicing customers in London.

ans:	select s.snum,s.comm from salespeople s join customer c on s.snum=c.snum where c.city='london';
+------+------+
| snum | comm |
+------+------+
| 1001 | 0.12 |
| 1001 | 0.12 |
+------+------+
2 rows in set (0.00 sec)

71. Write a query using ANY or ALL that will find all salespeople who have no customers located in
their city

ans:select s.sname,s.city,c.cname,c.city as cus_city from salespeople s,customer c where s.snum=c.snum and s.city!=c.city;
+---------+-----------+----------+----------+
| sname   | city      | cname    | cus_city |
+---------+-----------+----------+----------+
| Axelrod | NewYork   | Giovanni | Rome     |
| serres  | sanjoes   | Liu      | San Jose |
| serres  | sanjoes   | Grass    | Berlin   |
| motika  | London    | Pereira  | Rome     |
| rifkin  | barcelona | Cisneros | San Jose |
+---------+-----------+----------+----------+

72. Write a query using the EXISTS operator that selects all salespeople with customers located in
their cities who are not assigned to them.

ans: select *  from salespeople s left join customer c on s.snum=c.snum where cname is null;
+------+-------+--------+------+------+-------+------+--------+------+
| snum | sname | city   | comm | cnum | cname | city | rating | snum |
+------+-------+--------+------+------+-------+------+--------+------+
| 1005 | Fran  | London | 0.26 | NULL | NULL  | NULL |   NULL | NULL |
+------+-------+--------+------+------+-------+------+--------+------+

73. Write a query that selects all customers serviced by Peel or Motika. (Hint : The SNUM field
relates the two tables to one another.)

ans:select s.sname, c.cnum,c.cname,c.city,c.rating from salespeople s join customer c on s.snum=c.snum where s.sname='peel' or s.sname='motika';
+--------+------+---------+--------+--------+
| sname  | cnum | cname   | city   | rating |
+--------+------+---------+--------+--------+
| Peel   | 2001 | Hoffman | London |    100 |
| Peel   | 2006 | Clemens | London |    100 |
| motika | 2007 | Pereira | Rome   |    100 |
+--------+------+---------+--------+--------+

74. Count the number of salespeople registering orders for each day. (If a salesperson has more
than one order on a given day, he or she should be counted only once.)

ans:select b.sname,c.onum,c.odate,count(distinct b.sname) from customer a,salespeople b,orders c where a.snum=b.snum and a.cnum=c.cnum group by c.odate;
+---------+------+------------+-------------------------+
| sname   | onum | odate      | count(distinct b.sname) |
+---------+------+------------+-------------------------+
| rifkin  | 3001 | 1996-03-10 |                       5 |
| Axelrod | 3007 | 1996-04-10 |                       1 |
| Peel    | 3008 | 1996-05-10 |                       1 |
| serres  | 3010 | 1996-06-10 |                       2 |
+---------+------+------------+-------------------------+

75. Find all orders attributed to salespeople in London.

ans:select b.sname,b.city,c.onum from customer a,salespeople b,orders c where a.snum=b.snum and a.cnum=c.cnum and b.city='London';
+--------+--------+------+
| sname  | city   | onum |
+--------+--------+------+
| Peel   | London | 3003 |
| Peel   | London | 3008 |
| Peel   | London | 3011 |
| motika | London | 3002 |
+--------+--------+------+


76. Find all orders by customers not located in the same cities as their salespeople.

ans:select a.sname,a.city,b.cname,b.city as cus_city from salespeople a,customer b where a.snum=b.snum and a.city!=b.city;
+---------+-----------+----------+----------+
| sname   | city      | cname    | cus_city |
+---------+-----------+----------+----------+
| Axelrod | NewYork   | Giovanni | Rome     |
| serres  | sanjoes   | Liu      | San Jose |
| serres  | sanjoes   | Grass    | Berlin   |
| motika  | London    | Pereira  | Rome     |
| rifkin  | barcelona | Cisneros | San Jose |
+---------+-----------+----------+----------+

77. Find all salespeople who have customers with more than one current order.
ans:
78. Write a query that extracts from the Customers table every customer assigned to a
salesperson who currently has at least one other customer (besides the customer being
selected) with orders in the Orders table.

79. Write a query that selects all customers whose names begin with ‘C’.

ans: select * from customer where cname like 'c%';
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2006 | Clemens  | London   |    100 | 1001 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
80. Write a query on the Customers table that will find the highest rating in each city. Put the output 
in this form : for the city (city) the highest rating is : (rating).

ans:select city, max(rating) from customer group by city;
+----------+-------------+
| city     | max(rating) |
+----------+-------------+
| London   |         100 |
| Rome     |         200 |
| San Jose |         300 |
| Berlin   |         300 |
+----------+-------------+
81. Write a query that will produce the SNUM values of all salespeople with orders currently in the
Orders table (without any repeats).

ans:select b.snum,b.sname,c.onum from customer a,salespeople b,orders c where a.snum=b.snum and a.cnum=c.cnum group by b.snum;
+------+---------+------+
| snum | sname   | onum |
+------+---------+------+
| 1001 | Peel    | 3003 |
| 1002 | serres  | 3005 |
| 1003 | Axelrod | 3007 |
| 1004 | motika  | 3002 |
| 1007 | rifkin  | 3001 |
+------+---------+------+


82. Write a query that lists customers in descending order of rating. Output the rating field first,
followed by the customer’s names and numbers.

ans:select rating,cname,cnum from customer order by rating desc;
+--------+----------+------+
| rating | cname    | cnum |
+--------+----------+------+
|    300 | Grass    | 2004 |
|    300 | Cisneros | 2008 |
|    200 | Giovanni | 2002 |
|    200 | Liu      | 2003 |
|    100 | Hoffman  | 2001 |
|    100 | Clemens  | 2006 |
|    100 | Pereira  | 2007 |
+--------+----------+------+

83. Find the average commission for salespeople in London.

ans:select city,avg(comm) from salespeople where city='London' group by city;
+--------+-----------+
| city   | avg(comm) |
+--------+-----------+
| London |  0.163333 |
+--------+-----------+
84. Find all orders credited to the same salesperson who services Hoffman (CNUM 2001).

ans: select a.cname,b.sname,c.onum from customer a,salespeople b,orders c where a.snum=b.snum and a.cnum=c.cnum and a.cnum='2001';
+---------+-------+------+
| cname   | sname | onum |
+---------+-------+------+
| Hoffman | Peel  | 3003 |
+---------+-------+------+
85. Find all salespeople whose commission is in between 0.10 and 0.12 (both inclusive).

ans:select * from salespeople where comm between '0.10' and '0.12';
+------+---------+---------+------+
| snum | sname   | city    | comm |
+------+---------+---------+------+
| 1001 | Peel    | London  | 0.12 |
| 1003 | Axelrod | NewYork | 0.10 |
| 1004 | motika  | London  | 0.11 |
+------+---------+---------+------+

86. Write a query that will give you the names and cities of all salespeople in London with a
commission above 0.10.

mysql> select * from salespeople where city="london" and comm>0.10;
+------+--------+--------+------+
| snum | sname  | city   | comm |
+------+--------+--------+------+
| 1001 | Peel   | London | 0.12 |
| 1004 | Motika | London | 0.11 |
| 1005 | Fran   | London | 0.26 |
+------+--------+--------+------+

87. What will be the output from the following query?
mysql> select * from orders where (amt<1000 or not(odate='1996-03-10' and cnum>2003));
+------+---------+------------+------+
| onum | amt     | odate      | cnum |
+------+---------+------------+------+
| 3001 |   18.69 | 1996-03-10 | 2008 |
| 3003 |  767.19 | 1996-03-10 | 2001 |
| 3005 | 5160.45 | 1996-03-10 | 2003 |
| 3007 |   75.75 | 1996-04-10 | 2002 |
| 3008 | 4723.00 | 1996-05-10 | 2006 |
| 3009 | 1713.23 | 0199-04-10 | 2002 |
| 3010 | 1309.95 | 1996-06-10 | 2004 |
| 3011 | 9891.88 | 1996-06-10 | 2006 |
+------+---------+------------+------+

88. Write a query that selects each customer’s smallest order.
mysql> select cnum,min(amt) from orders group by cnum;
+------+----------+
| cnum | min(amt) |
+------+----------+
| 2001 |   767.19 |
| 2002 |    75.75 |
| 2003 |  5160.45 |
| 2004 |  1309.95 |
| 2006 |  4723.00 |
| 2007 |  1900.10 |
| 2008 |    18.69 |
+------+----------+

89. Write a query that selects the first customer in alphabetical order whose name begins with G.

mysql> select * from customer where cname like "g%";
+------+----------+--------+--------+------+
| cnum | cname    | city   | rating | snum |
+------+----------+--------+--------+------+
| 2002 | Giovanni | Rome   |    200 | 1003 |
| 2004 | Grass    | Berlin |    300 | 1002 |
+------+----------+--------+--------+------+

90. Write a query that counts the number of different nonNULL city values in the Customers table.
mysql> select count(*) from customer where city is not null;
+----------+
| count(*) |
+----------+
|        7 |
+----------+

91. Find the average amount from the Orders table.
mysql> select avg(amt) from ORDERS;
+-------------+
| avg(amt)    |
+-------------+
| 2665.840000 |
+-------------+

92. What would be the output from the following query?
SELECT * FROM ORDERS
WHERE NOT (odate = 10/03/96 OR snum > 1006) AND amt >=
1500);


mysql> select * from salespeople s join customer c join orders o on s.snum =c.snum and c.cnum =o.cnum where not (o.odate =1996-03-10 or s.snum>1006) and amt>=1500;
+------+---------+----------+------+------+----------+----------+--------+------+------+---------+------------+------+
| snum | sname   | city     | comm | cnum | cname    | city     | rating | snum | onum | amt     | odate      | cnum |
+------+---------+----------+------+------+----------+----------+--------+------+------+---------+------------+------+
| 1004 | Motika  | London   | 0.11 | 2007 | Pereira  | Rome     |    100 | 1004 | 3002 | 1900.10 | 1996-03-10 | 2007 |
| 1002 | Serres  | San Jose | 0.13 | 2003 | Liu      | San jose |    200 | 1002 | 3005 | 5160.45 | 1996-03-10 | 2003 |
| 1001 | Peel    | London   | 0.12 | 2006 | Clemens  | London   |    100 | 1001 | 3008 | 4723.00 | 1996-05-10 | 2006 |
| 1003 | AxelRod | New York | 0.10 | 2002 | Giovanni | Rome     |    200 | 1003 | 3009 | 1713.23 | 0199-04-10 | 2002 |
| 1001 | Peel    | London   | 0.12 | 2006 | Clemens  | London   |    100 | 1001 | 3011 | 9891.88 | 1996-06-10 | 2006 |
+------+---------+----------+------+------+----------+----------+--------+------+------+---------+------------+------+

93. Find all customers who are not located in San Jose and whose rating is above 200

mysql> select cname from customer where city!='san jose' and rating>200;
+-------+
| cname |
+-------+
| Grass |
+-------+

94. Give a simpler way to write this query :
SELECT snum, sname city, comm FROM salespeople
WHERE (comm > + 0.12 OR comm < 0.14)
mysql> select snum,sname,city,comm from salespeople where comm>+12 or comm<0.14;
+------+---------+----------+------+
| snum | sname   | city     | comm |
+------+---------+----------+------+
| 1001 | Peel    | London   | 0.12 |
| 1002 | Serres  | San Jose | 0.13 |
| 1003 | AxelRod | New York | 0.10 |
| 1004 | Motika  | London   | 0.11 |
+------+---------+----------+------+

95. Evaluate the following query :
SELECT * FROM orders
WHERE NOT ((odate = 10/03/96 AND snum > 1002) OR amt > 2000.00);
A. select * from orders o  join salespeople s where not ((odate=1996-10-03 and s.snum>1002) or o.amt>2000.00);
+------+---------+------------+------+------+---------+------------+------+
| onum | amt     | odate      | cnum | snum | sname   | city       | comm |
+------+---------+------------+------+------+---------+------------+------+
| 3010 | 1309.95 | 1996-06-10 | 2004 | 1001 | Peel    | London     | 0.12 |
| 3009 | 1713.23 | 0199-04-10 | 2002 | 1001 | Peel    | London     | 0.12 |
| 3007 |   75.75 | 1996-04-10 | 2002 | 1001 | Peel    | London     | 0.12 |
| 3006 | 1098.16 | 1996-03-10 | 2008 | 1001 | Peel    | London     | 0.12 |
| 3003 |  767.19 | 1996-03-10 | 2001 | 1001 | Peel    | London     | 0.12 |
| 3002 | 1900.10 | 1996-03-10 | 2007 | 1001 | Peel    | London     | 0.12 |
| 3001 |   18.69 | 1996-03-10 | 2008 | 1001 | Peel    | London     | 0.12 |
| 3010 | 1309.95 | 1996-06-10 | 2004 | 1002 | Serres  | San Jose   | 0.13 |
| 3009 | 1713.23 | 0199-04-10 | 2002 | 1002 | Serres  | San Jose   | 0.13 |
| 3007 |   75.75 | 1996-04-10 | 2002 | 1002 | Serres  | San Jose   | 0.13 |
| 3006 | 1098.16 | 1996-03-10 | 2008 | 1002 | Serres  | San Jose   | 0.13 |
| 3003 |  767.19 | 1996-03-10 | 2001 | 1002 | Serres  | San Jose   | 0.13 |
| 3002 | 1900.10 | 1996-03-10 | 2007 | 1002 | Serres  | San Jose   | 0.13 |
| 3001 |   18.69 | 1996-03-10 | 2008 | 1002 | Serres  | San Jose   | 0.13 |
| 3010 | 1309.95 | 1996-06-10 | 2004 | 1003 | AxelRod | New York   | 0.10 |
| 3009 | 1713.23 | 0199-04-10 | 2002 | 1003 | AxelRod | New York   | 0.10 |
| 3007 |   75.75 | 1996-04-10 | 2002 | 1003 | AxelRod | New York   | 0.10 |
| 3006 | 1098.16 | 1996-03-10 | 2008 | 1003 | AxelRod | New York   | 0.10 |
| 3003 |  767.19 | 1996-03-10 | 2001 | 1003 | AxelRod | New York   | 0.10 |
| 3002 | 1900.10 | 1996-03-10 | 2007 | 1003 | AxelRod | New York   | 0.10 |
| 3001 |   18.69 | 1996-03-10 | 2008 | 1003 | AxelRod | New York   | 0.10 |
| 3010 | 1309.95 | 1996-06-10 | 2004 | 1004 | Motika  | London     | 0.11 |
| 3009 | 1713.23 | 0199-04-10 | 2002 | 1004 | Motika  | London     | 0.11 |
| 3007 |   75.75 | 1996-04-10 | 2002 | 1004 | Motika  | London     | 0.11 |
| 3006 | 1098.16 | 1996-03-10 | 2008 | 1004 | Motika  | London     | 0.11 |
| 3003 |  767.19 | 1996-03-10 | 2001 | 1004 | Motika  | London     | 0.11 |
| 3002 | 1900.10 | 1996-03-10 | 2007 | 1004 | Motika  | London     | 0.11 |
| 3001 |   18.69 | 1996-03-10 | 2008 | 1004 | Motika  | London     | 0.11 |
| 3010 | 1309.95 | 1996-06-10 | 2004 | 1005 | Fran    | London     | 0.26 |
| 3009 | 1713.23 | 0199-04-10 | 2002 | 1005 | Fran    | London     | 0.26 |
| 3007 |   75.75 | 1996-04-10 | 2002 | 1005 | Fran    | London     | 0.26 |
| 3006 | 1098.16 | 1996-03-10 | 2008 | 1005 | Fran    | London     | 0.26 |
| 3003 |  767.19 | 1996-03-10 | 2001 | 1005 | Fran    | London     | 0.26 |
| 3002 | 1900.10 | 1996-03-10 | 2007 | 1005 | Fran    | London     | 0.26 |
| 3001 |   18.69 | 1996-03-10 | 2008 | 1005 | Fran    | London     | 0.26 |
| 3010 | 1309.95 | 1996-06-10 | 2004 | 1007 |  Rifkin |  Barcelona | 0.15 |
| 3009 | 1713.23 | 0199-04-10 | 2002 | 1007 |  Rifkin |  Barcelona | 0.15 |
| 3007 |   75.75 | 1996-04-10 | 2002 | 1007 |  Rifkin |  Barcelona | 0.15 |
| 3006 | 1098.16 | 1996-03-10 | 2008 | 1007 |  Rifkin |  Barcelona | 0.15 |
| 3003 |  767.19 | 1996-03-10 | 2001 | 1007 |  Rifkin |  Barcelona | 0.15 |
| 3002 | 1900.10 | 1996-03-10 | 2007 | 1007 |  Rifkin |  Barcelona | 0.15 |
| 3001 |   18.69 | 1996-03-10 | 2008 | 1007 |  Rifkin |  Barcelona | 0.15 |
+------+---------+------------+------+------+---------+------------+------+

96. Which salespersons attend to customers not in the city they have been assigned to?
mysql> select s.sname,s.city,c.cname,c.city from salespeople s,customer c where c.city!=s.city and s.snum=c.snum;
+---------+------------+----------+----------+
| sname   | city       | cname    | city     |
+---------+------------+----------+----------+
| AxelRod | New York   | Giovanni | Rome     |
| Serres  | San Jose   | Grass    | Berlin   |
| Motika  | London     | Pereira  | Rome     |
|  Rifkin |  Barcelona | Cisneros | San Jose |
+---------+------------+----------+----------+


97. Which salespeople get commission greater than 0.11 are serving customers rated less than
250?
 select * from salespeople s join customer c on s.snum=c.snum where c.rating>0.11 and c.rating<=0.25;
Empty set (0.00 sec)

98. Which salespeople have been assigned to the same city but get different commission
percentages?
> select comm from salespeople where city="london";
+------+
| comm |
+------+
| 0.12 |
| 0.11 |
| 0.26 |
+------+
3 rows in set (0.00 sec)

99. Which salesperson has earned the most by way of commission?
mysql> select snum, max(comm) from salespeople;
+------+-----------+
| snum | max(comm) |
+------+-----------+
| 1001 |      0.26 |
+------+-----------+